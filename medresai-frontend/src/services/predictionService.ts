import axios from 'axios';

// API URL based on environment
const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000/api/v1';

/**
 * Types for the prediction API
 */
export interface ModelStatus {
  status: string;
  is_loading: boolean;
  model_loaded: boolean;
  tokenizer_loaded: boolean;
  last_error?: string;
  last_prediction_time?: number;
  version: string;
}

export interface PredictionResult {
  input_sequence: string;
  prediction: string;
  model_version: string;
  timestamp: string;
  prediction_time_seconds?: number;
}

/**
 * Service for making predictions using the backend API.
 */
export default class PredictionService {
  /**
   * Check the status of the model
   * @returns Promise with model status
   */
  static async checkModelStatus(): Promise<ModelStatus> {
    try {
      console.log('Checking model status...');
      const response = await axios.get(`${API_URL}/predict/status`);
      return response.data;
    } catch (error) {
      console.error('Error checking model status:', error);
      throw error;
    }
  }

  /**
   * Waits for the model to be ready before proceeding
   * @param maxAttempts Maximum number of attempts to check status
   * @param interval Interval between attempts in ms
   * @returns Promise that resolves when model is ready
   */
  static async waitForModelReady(maxAttempts = 10, interval = 2000): Promise<ModelStatus> {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const status = await this.checkModelStatus();

        // If model is ready or in error state, return status
        if (status.status === 'ready' || status.status === 'error') {
          return status;
        }

        // If model is still loading, wait and try again
        if (status.is_loading || status.status === 'loading') {
          console.log(`Model is loading (attempt ${attempt}/${maxAttempts}), waiting ${interval}ms...`);
          await new Promise(resolve => setTimeout(resolve, interval));
          continue;
        }

        // If model is in another state, try to load it by checking status again
        console.log(`Model status: ${status.status}, checking again...`);
      } catch (error) {
        console.error(`Error checking model status (attempt ${attempt}/${maxAttempts}):`, error);

        // Wait before retrying
        await new Promise(resolve => setTimeout(resolve, interval));
      }
    }

    throw new Error(`Model not ready after ${maxAttempts} attempts`);
  }

  /**
   * Submit a sequence for antiviral prediction.
   * @param sequence The genomic sequence to analyze
   * @param options Additional options
   * @returns Promise with prediction results
   */
  static async predictAntiviral(
    sequence: string,
    options: { maxLength?: number, waitForModel?: boolean } = {}
  ): Promise<PredictionResult> {
    const { maxLength = 200, waitForModel = true } = options;

    try {
      console.log('Submitting sequence for prediction:', sequence.substring(0, 50) + '...');

      // Check if we should wait for the model to be ready
      if (waitForModel) {
        try {
          const status = await this.waitForModelReady();
          console.log('Model is ready with status:', status.status);
        } catch (error) {
          console.warn('Could not confirm model status, proceeding anyway:', error);
        }
      }

      // Make prediction request
      const response = await axios.post(`${API_URL}/predict/antiviral`, {
        sequence,
        max_length: maxLength
      });

      return response.data;
    } catch (error: any) {
      // Extract more detailed error information
      if (error.response?.data?.detail) {
        console.error('Prediction error:', error.response.data.detail);
        throw new Error(error.response.data.detail);
      }

      console.error('Error making prediction:', error);
      throw error;
    }
  }

  /**
   * Get example viral data.
   * @returns Example data for demonstration purposes
   */
  static getExampleViralData() {
    return {
      sarsCoV2: {
        sequence: "ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACCAGAACTCAATTACCCCCTGCATACACTAATTCTTTCACACGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGTTTTACATTCAACTCAGGACTTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGCTATACATGTCTCTGGGACCAATGGTACTAAGAGGTTTGATAACCCTGTCCTACCATTTAATGATGGTGTTTATTTTGCTTCCACTGAGAAGTCTAACATAATAAGAGGCTGGATTTTTGGTACTACTTTAGATTCGAAGACCCAGTCCCTACTTATTGTTAATAACGCTACTAATGTTGTTATTAAAGTCTGTGAATTTCAATTTTGTAATGATCCATTTTTGGGTGTTTATTACCACAAAAACAACAAAAGTTGGATGGAAAGTGAGTTCAGAGTTTATTCTAGTGCGAATAATTGCACTTTTGAATATGTCTCTCAGCCTTTTCTTATGGACCTTGAAGGAAAACAGGGTAATTTCAAAAATCTTAGGGAATTTGTGTTTAAGAATATTGATGGTTATTTTAAAATATATTCTAAGCACACGCCTATTAATTTAGTGCGTGATCTCCCTCAGGGTTTTTCGGCTTTAGAACCATTGGTAGATTTGCCAATAGGTATTAACATCACTAGGTTTCAAACTTTACTTGCTTTACATAGAAGTTATTTGACTCCTGGTGATTCTTCTTCAGGTTGGACAGCTGGTGCTGCAGCTTATTATGTGGGTTATCTTCAACCTAGGACTTTTCTATTAAAATATAATGAAAATGGAACCATTACAGATGCTGTAGACTGTGCACTTGACCCTCTCTCAGAAACAAAGTGTACGTTGAAATCCTTCACTGTAGAAAAAGGAATCTATCAAACTTCTAACTTTAGAGTCCAACCAACAGAATCTATTGTTAGATTTCCTAATATTACAAACTTGTGCCCTTTTGGTGAAGTTTTTAACGCCACCAGATTTGCATCTGTTTATGCTTGGAACAGGAAGAGAATCAGCAACTGTGTTGCTGATTATTCTGTCCTATATAATTCCGCATCATTTTCCACTTTTAAGTGTTATGGAGTGTCTCCTACTAAATTAAATGATCTCTGCTTTACTAATGTCTATGCAGATTCATTTGTAATTAGAGGTGATGAAGTCAGACAAATCGCTCCAGGGCAAACTGGAAAGATTGCTGATTATAATTATAAATTACCAGATGATTTTACAGGCTGCGTTATAGCTTGGAATTCTAACAATCTTGATTCTAAGGTTGGTGGTAATTATAATTACCTGTATAGATTGTTTAGGAAGTCTAATCTCAAACCTTTTGAGAGAGATATTTCAACTGAAATCTATCAGGCCGGTAGCACACCTTGTAATGGTGTTGAAGGTTTTAATTGTTACTTTCCTTTACAATCATATGGTTTCCAACCCACTAATGGTGTTGGTTACCAACCATACAGAGTAGTAGTACTTTCTTTTGAACTTCTACATGCACCAGCAACTGTTTGTGGACCTAAAAAGTCTACTAATTTGGTTAAAAACAAATGTGTCAATTTCAACTTCAATGGTTTAACAGGCACAGGTGTTCTTACTGAGTCTAACAAAAAGTTTCTGCCTTTCCAACAATTTGGCAGAGACATTGCTGACACTACTGATGCTGTCCGTGATCCACAGACACTTGAGATTCTTGACATTACACCATGTTCTTTTGGTGGTGTCAGTGTTATAACACCAGGAACAAATACTTCTAACCAGGTTGCTGTTCTTTATCAGGATGTTAACTGCACAGAAGTCCCTGTTGCTATTCATGCAGATCAACTTACTCCTACTTGGCGTGTTTATTCTACAGGTTCTAATGTTTTTCAAACACGTGCAGGCTGTTTAATAGGGGCTGAACATGTCAACAACTCATATGAGTGTGACATACCCATTGGTGCAGGTATATGCGCTAGTTATCAGACTCAGACTAATTCTCCTCGGCGGGCACGTAGTGTAGCTAGTCAATCCATCATTGCCTACACTATGTCACTTGGTGCAGAAAATTCAGTTGCTTACTCTAATAACTCTATTGCCATACCCACAAATTTTACTATTAGTGTTACCACAGAAATTCTACCAGTGTCTATGACCAAGACATCAGTAGATTGTACAATGTACATTTGTGGTGATTCAACTGAATGCAGCAATCTTTTGTTGCAATATGGCAGTTTTTGTACACAATTAAACCGTGCTTTAACTGGAATAGCTGTTGAACAAGACAAAAACACCCAAGAAGTTTTTGCACAAGTCAAACAAATTTACAAAACACCACCAATTAAAGATTTTGGTGGTTTTAATTTTTCACAAATATTACCAGATCCATCAAAACCAAGCAAGAGGTCATTTATTGAAGATCTACTTTTCAACAAAGTGACACTTGCAGATGCTGGCTTCATCAAACAATATGGTGATTGCCTTGGTGATATTGCTGCTAGAGACCTCATTTGTGCACAAAAGTTTAACGGCCTTACTGTTTTGCCACCTTTGCTCACAGATGAAATGATTGCTCAATACACTTCTGCACTGTTAGCGGGTACAATCACTTCTGGTTGGACCTTTGGTGCAGGTGCTGCATTACAAATACCATTTGCTATGCAAATGGCTTATAGGTTTAATGGTATTGGAGTTACACAGAATGTTCTCTATGAGAACCAAAAATTGATTGCCAACCAATTTAATAGTGCTATTGGCAAAATTCAAGACTCACTTTCTTCCACAGCAAGTGCACTTGGAAAACTTCAAGATGTGGTCAACCAAAATGCACAAGCTTTAAACACGCTTGTTAAACAACTTAGCTCCAATTTTGGTGCAATTTCAAGTGTTTTAAATGATATCCTTTCACGTCTTGACAAAGTTGAGGCTGAAGTGCAAATTGATAGGTTGATCACAGGCAGACTTCAAAGTTTGCAGACATATGTGACTCAACAATTAATTAGAGCTGCAGAAATCAGAGCTTCTGCTAATCTTGCTGCTACTAAAATGTCAGAGTGTGTACTTGGACAATCAAAAAGAGTTGATTTTTGTGGAAAGGGCTATCATCTTATGTCCTTCCCTCAGTCAGCACCTCATGGTGTAGTCTTCTTGCATGTGACTTATGTCCCTGCACAAGAAAAGAACTTCACAACTGCTCCTGCCATTTGTCATGATGGAAAAGCACACTTTCCTCGTGAAGGTGTCTTTGTTTCAAATGGCACACACTGGTTTGTAACACAAAGGAATTTTTATGAACCACAAATCATTACTACAGACAACACATTTGTGTCTGGTAACTGTGATGTTGTAATAGGAATTGTCAACAACACAGTTTATGATCCTTTGCAACCTGAATTAGACTCATTCAAGGAGGAGTTAGATAAATATTTTAAGAATCATACATCACCAGATGTTGATTTAGGTGACATCTCTGGCATTAATGCTTCAGTTGTAAACATTCAAAAAGAAATTGACCGCCTCAATGAGGTTGCCAAGAATTTAAATGAATCTCTCATCGATCTCCAAGAACTTGGAAAGTATGAGCAGTATATAAAATGGCCATGGTACATTTGGCTAGGTTTTATAGCTGGCTTGATTGCCATAGTAATGGTGACAATTATGCTTTGCTGTATGACCAGTTGCTGTAGTTGTCTCAAGGGCTGTTGTTCTTGTGGATCCTGCTGCAAATTTGATGAAGACGACTCTGAGCCAGTGCTCAAAGGAGTCAAATTACATTACACATAA",
        spikeProtein: "MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVYSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQGFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFLLKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITNLCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCFTNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYNYLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPYRVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFGRDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAIHADQLTPTWRVYSTGSNVFQTRAGCLIGAEHVNNSYECDIPIGAGICASYQTQTNSPRRARSVASQSIIAYTMSLGAENSVAYSNNSIAIPTNFTISVTTEILPVSMTKTSVDCTMYICGDSTECSNLLLQYGSFCTQLNRALTGIAVEQDKNTQEVFAQVKQIYKTPPIKDFGGFNFSQILPDPSKPSKRSFIEDLLFNKVTLADAGFIKQYGDCLGDIAARDLICAQKFNGLTVLPPLLTDEMIAQYTSALLAGTITSGWTFGAGAALQIPFAMQMAYRFNGIGVTQNVLYENQKLIANQFNSAIGKIQDSLSSTASALGKLQDVVNQNAQALNTLVKQLSSNFGAISSVLNDILSRLDKVEAEVQIDRLITGRLQSLQTYVTQQLIRAAEIRASANLAATKMSECVLGQSKRVDFCGKGYHLMSFPQSAPHGVVFLHVTYVPAQEKNFTTAPAICHDGKAHFPREGVFVSNGTHWFVTQRNFYEPQIITTDNTFVSGNCDVVIGIVNNTVYDPLQPELDSFKEELDKYFKNHTSPDVDLGDISGINASVVNIQKEIDRLNEVAKNLNESLIDLQELGKYEQYIKWPWYIWLGFIAGLIAIVMVTIMLCCMTSCCSCLKGCCSCGSCCKFDEDDSEPVLKGVKLHYT",
        bindingSites: "TNLCPFGEVFNATRFASVYAWNRK"
      },
      hbv: {
        sequence: "CTCCACCAATCGGCAGTCAGGAAGCTCGAATTCTCCTCCTCTTCATGGGAGGTTGGTCTTCCAAACCTCGACAAGGCATGGGGACGAATCTTTCTGTTCCGACCACCAGTTGGATCCAGCCTTCAGAGCAAACACCGCAAATCCAGATTGGGACTTCAACCCCGTCGCTGCCATCTGGTCTGTACTTCGAGTTCTATCGTTAATCTTATGGGGACGCTGTGGTTATCCTGCCTTAATGCCTTTATATGCATGTATACAATCTTTGCTGGGTGGCTCCAGTTCGGGAACAGTAACCCCGCTACTGCCGCCAACCTATTTAACACCTACGGACGGAAACTGCACTTGTATTCCCATCCCATCATCTTGGGCTTTCGCAAA",
        spikeProtein: "MQLFHLCLIISCSCPTVQASKLCLGWLWGMDIDPYKEFGATVELLSFLPSDFFPSVRDLLDTAAALYREALESPEHCSPHHTALRQAILCWGELMTLATWVGNNLEDPASRDLVVNYVNTNMGLKIRQLLWFHISCLTFGRETVLEYLVSFGVWIRTPPAYRPPNAPILSTLPETTVVRRRGRSPRRRTPSPRRRRSQSPRRRRSQSRESQC",
        bindingSites: "LDPASRDLVVNYVNTNMGLKIRQL"
      },
      influenzaA: {
        sequence: "GGAACAAAAAGCAACAAAAATGAAGGCAATACTAGTAGTTCTGCTATATACATTTGCAACCGCAAATGCAGACACATTATGTATAGGTTATCATGCGAACAATTCAACAGACACTGTAGACACAGTACTAGAAAAGAATGTAACAGTAACACACTCTGTTAACCTTCTAGAAGACAAGCATAACGGGAAACTATGCAAACTAAGAGGGGTAGCCCCATTGCATTTGGGTAAATGTAACATTGCTGGCTGGATCCTGGGAAATCCAGAGTGTGAATCACTCTCCACAGCAAGCTCATGGTCCTACATTGTGGAAACATCTAATTCAGACAATGGAACGTGTTACCCAGGAGATTTCATCGATTATGAGGAGCTAAGAGAGCAATTGAGCTCAGTGTCATCATTTGAAAGGTTTGAGATATTCCCCAAGACAAGTTCATGGCCCAATCATGACTCGAACAAAGGTGTAACGGCAGCATGTCCTCATGCTGGAGCAAAAAGCTTCTACAAAAATTTAA",
        spikeProtein: "MKAILVVLLYTFATANAETYVSIMRINEQDCVDTTVEKSNVTNGTLLSNFLKDKAEVVNKTYRGDLQVTGVHLLLQRLGDVMYWVSMGERVSNELNEKFSMEIDEIEIAVLMPDLDRVKVQTLQLNWVMVDLEKGDTLKFCIYGGFKFVATNVLSPVFSKYYRVCSFGRVSDGVFTKIYPGISDVDRKLQKVLKSNVFDTEFTDVIPKESWEKTHGGLRKLMRMSRVKLGSGMDPKSKGDLHKEFNEKLLRMQESDKILQDKEKLLQNSRLIKDKEFEDLNKSTIAYLGDATTVNELKSKVIELQEEFEPMIYSGKIRNKPVVGLIWGVHHSGSGAPAHSDRELVARSTVGKQIVTTRDTMLEKINEGGRTNSTDNLLFLTTRVEHQILDNGNEVKTHLLRLSSGVKVSATKALGSVSLVLDQTQRIDFWMSKPNGWVTQLSSNFKGDFVLFVSSTYERIGSCSPHTVLWRMGVPPSSMGKCPRYSFMHSRPWSMRSTSNRGLVPEDGGRSVATCPYTVGSFNKRWVLVGKKYAMIYEPVFYKGTQGFFSVMLDKANSKWNPVMGTFRQLNVKSDWSGYSIGFGPYSVFQTVKLYVNA",
        bindingSites: "LLSNFLKDKAEVVNKTYRGDL"
      }
    };
  }
}